---
import { Image } from '@astrojs/image/components';
import imageSize from 'image-size';
import { Tracker } from '../../components/Tracker';
import { prisma } from '../../db/client';
/*import { getItemData } from '../../lib/item-data';*/
import Layout from '../../layouts/Layout.astro';
import { appRouter } from '../../trpc/router/_index';

/*const { width } = imageSize('/images/maps/johto_kanto.png');*/
const width = 3000;
const IMG_WIDTH = 600;
const POS_MOD = IMG_WIDTH / width!;

let { roomId: origRoomId } = Astro.params as { roomId: string };
let roomId = origRoomId.toUpperCase();

const similarChars: [string, string][] = [
	['O', '0'],
	['I', '1'],
	['L', '1'],
	['S', '5'],
];

similarChars.forEach(([oldChar, newChar]) => {
	roomId = roomId.replaceAll(oldChar, newChar);
});

// TODO: rewrite the path instead of redirecting to prevent a potential infinite redirect
/*Astro.url.pathname = `/room/${roomId}`;*/
if (roomId !== origRoomId) return Astro.redirect(`/room/${roomId}`);

const room = await prisma.room.findFirst({ where: { id: roomId } });
if (!room) return Astro.redirect(`/?error=${roomId}`);

let userId = Astro.cookies.get(roomId).value ?? '';
const user = await prisma.user.findUnique({ where: { id: userId } });
if (!user) return Astro.redirect(`/?error=${roomId}&userError=${userId}`);

const locations = await prisma.location.findMany({ where: { roomId } });

const trpcCaller = appRouter.createCaller({ prisma, userId, roomId });
const users = await trpcCaller.user.getUsers();
const items = await trpcCaller.item.getAll();
const markers = await prisma.marker.findMany({ where: { roomId } });

const webRtcRoomId = Astro.url.host + roomId + room.rtcId;
---

<Layout title="Crystal Item Tracker">
	<Tracker
		client:load
		items={items}
		markers={markers}
		locations={locations}
		users={users}
		mapWidth={IMG_WIDTH}
		webRtcRoomId={webRtcRoomId}
		positionModifier={POS_MOD}
		roomId={roomId}>
		<img
			class="inset-0 block"
			src="/images/maps/johto_kanto.png"
			alt=""
			width={IMG_WIDTH}
			hidden
		/>
	</Tracker>
</Layout>

<style>
	@keyframes blink {
		from {
			outline-width: none;
			outline-style: none;
		}
		to {
			outline-width: 2px;
			outline-style: solid;
		}
	}
</style>
