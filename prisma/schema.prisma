// This is your Prisma schema file,
// learn more about it in the docs: https://prise.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Room {
    id        String      @id
    password  String      @default(cuid())
    rtcId     String      @default(cuid())
    locations Location[]
    items     Item[]
    users     User[]
    status    RoomStatus?
    isLocked  Boolean     @default(false)
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
}

enum RoomStatus {
    PUBLIC
    PRIVATE
}

model User {
    id            String      @unique @default(cuid())
    name          String
    items         UserItem[]
    checks        UserCheck[]
    preferences   String?
    roomId        String
    room          Room        @relation(fields: [roomId], references: [id], onDelete: Cascade)
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    progressCodes String // Stringified JSON array of progress codes

    @@id([id, roomId])
    @@index([roomId])
}

model Location {
    id          Int
    roomId      String
    room        Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
    checks      Check[]
    name        String
    x           Int
    y           Int
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    accessRules String? // Stringified array of access rules

    @@id([id, roomId])
    @@index([roomId], name: "roomId")
}

model Check {
    id              Int
    name            String
    roomId          String
    locationId      Int
    location        Location      @relation(fields: [locationId, roomId], references: [id, roomId], onDelete: Cascade)
    items           Item[]
    userchecks      UserCheck[]
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt
    markerChecks    MarkerCheck[]
    accessRules     String? // Stringified array of access rules
    visibilityRules String? // Stringified array of visibility rules
    hosted_item     String?
    item_count      Int?
    clear_as_group  Boolean       @default(true)

    @@id([id, roomId, locationId])
    @@index([locationId, roomId], name: "LocationCheck")
    @@map("ItemCheck")
}

model UserCheck {
    userId          String
    roomId          String
    user            User     @relation(fields: [userId, roomId], references: [id, roomId], onDelete: Cascade)
    checkId         Int
    checkLocationId Int
    check           Check    @relation(fields: [checkId, roomId, checkLocationId], references: [id, roomId, locationId], onDelete: Cascade)
    completed       Boolean  @default(false)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    @@id([userId, checkId, roomId, checkLocationId])
    @@index([checkId, roomId, checkLocationId], name: "CheckUserCheck")
    @@index([userId, roomId], name: "UserUserCheck")
}

model Item {
    id                Int        @default(autoincrement())
    roomId            String
    room              Room       @relation(fields: [roomId], references: [id], onDelete: Cascade)
    checkId           Int?
    checkLocationId   Int?
    foundAtCheck      Check?     @relation(fields: [checkId, checkLocationId, roomId], references: [id, locationId, roomId], onDelete: Cascade)
    userItemInstances UserItem[]
    img               String
    name              String
    type              ItemType
    codes             String
    img_mods          String?
    createdAt         DateTime   @default(now())
    updatedAt         DateTime   @updatedAt

    @@id([id, roomId])
    @@index([roomId])
    @@index([checkId, checkLocationId, roomId], name: "CheckItem")
}

enum ItemType {
    GENERAL
    HM
    BADGE
    MARKER
}

model Marker {
    id           Int
    roomId       String
    img          String
    name         String
    markerChecks MarkerCheck[]
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt

    @@id([id, roomId])
}

model MarkerCheck {
    roomId          String
    markerId        Int
    marker          Marker   @relation(fields: [markerId, roomId], references: [id, roomId], onDelete: Cascade)
    checkId         Int
    checkLocationId Int
    check           Check    @relation(fields: [checkId, checkLocationId, roomId], references: [id, locationId, roomId], onDelete: Cascade)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    @@id([markerId, checkId, checkLocationId, roomId])
    @@index([markerId, roomId])
    @@index([checkId, checkLocationId, roomId])
}

model UserItem {
    userId    String
    roomId    String
    user      User     @relation(fields: [userId, roomId], references: [id, roomId], onDelete: Cascade)
    itemId    Int
    item      Item     @relation(fields: [itemId, roomId], references: [id, roomId], onDelete: Cascade)
    found     Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([userId, itemId, roomId])
    @@index([userId, roomId])
    @@index([itemId, roomId])
}
