// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Room {
  id        String  @id
  password  String  @default(cuid()) 
  rtcId     String  @default(cuid())
  locations Location[] 
  items     Item[] 
  users     User[]
  status    RoomStatus?
  isLocked  Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum RoomStatus {
  PUBLIC
  PRIVATE
}

model User {
  id    String  @default(cuid()) @unique
  name  String
  items UserItem[]
  checks UserCheck[]
  roomId String
  preferences String?
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([id, roomId])
}

model Location {
  id      Int  
  roomId  String 
  room    Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  checks  Check[]
  name    String
  x       Int
  y       Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([id, roomId])
}

model Check {
  id              Int 
  name            String
  roomId          String
  locationId      Int 
  location        Location @relation(fields: [locationId, roomId], references: [id, roomId], onDelete: Cascade)
  itemId          Int? 
  itemFound       Item? @relation(fields: [itemId, roomId], references: [id, roomId], onDelete: Cascade)
  userchecks      UserCheck[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
	@@map("ItemCheck")
  @@id([id, roomId, locationId])
  @@unique([itemId, roomId])
}

model UserCheck {
  userId  String 
  roomId  String
  user    User @relation(fields: [userId, roomId], references: [id, roomId], onDelete: Cascade)
  checkId Int
  checkLocationId  Int
  check   Check @relation(fields: [checkId, roomId, checkLocationId], references: [id, roomId, locationId], onDelete: Cascade)
  completed Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, checkId, roomId, checkLocationId])
}

model Item {
  id                Int @default(autoincrement())
  roomId            String
  room              Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  foundAtCheck      Check?
  userItemInstances UserItem[]
  img               String
  name              String
  type              ItemType
  img_mods          String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([id, roomId])
}

enum ItemType {
  GENERAL
  HM
  BADGE
  MARKER
}

model UserItem {
  userId  String 
  roomId  String
  user    User @relation(fields: [userId, roomId], references: [id, roomId], onDelete: Cascade)
  itemId  Int
  item    Item @relation(fields: [itemId, roomId], references: [id, roomId], onDelete: Cascade)
  found   Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, itemId, roomId])
}

